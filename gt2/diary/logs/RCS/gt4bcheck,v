head	1.7;
access;
symbols;
locks
	arpepper:1.7; strict;
comment	@# @;


1.7
date	2022.02.20.12.19.15;	author arpepper;	state Exp;
branches;
next	1.6;

1.6
date	2022.02.19.09.11.31;	author arpepper;	state Exp;
branches;
next	1.5;

1.5
date	2022.02.18.17.36.32;	author arpepper;	state Exp;
branches;
next	1.4;

1.4
date	2022.02.18.17.23.57;	author arpepper;	state Exp;
branches;
next	1.3;

1.3
date	2021.03.22.18.58.22;	author arpepper;	state Exp;
branches;
next	1.2;

1.2
date	2021.03.22.18.56.44;	author arpepper;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.08.00.55.28;	author arpepper;	state Exp;
branches;
next	;


desc
@Basically works for validating the status lines.
@


1.7
log
@Created doauditb which I hope can be just placed in gt4garage,
Took a while to clean it up (syntax debug).
@
text
@#!/usr/bin/perl -w

require 5.002;
use strict;

$main::bspec = 0;
$main::machine = 0;
$main::course = 0;
$main::battle = 0;

sub
doauditb {
	my($line,$rest,$r1,$r2) = @@_;

	my ($warn, $newbspec, $newmachine, $newcourse, $newbattle);
	my ($incbspec, $incmachine, $inccourse, $incbattle);
	my ($lineno,$note);
	$warn = "";
	if ( $rest =~ /B:(\d+)\/(\d+)\/(\d+)\/(\d+)/ ) {
		$newbspec = $1;
		$newmachine = $2;
		$newcourse = $3;
		$newbattle = $4;
		$lineno = "";
		if ($line =~ /^\s*(\d+)\s+/ ) {
			$lineno = " ".$1;
		}
		if ($rest =~ /B:\d+\/\d+\/\d+\/\d+ *\(n\/c\)/ ) {
			$incbspec = 0;
			$incmachine = 0;
			$inccourse = 0;
			$incbattle = 0;
		}
		elsif ($rest =~
		  /B:\d+\/\d+\/\d+\/\d+ *\(\+{0,1}(\d+)\/\+{0,1}(\d+)\/\+{0,1}(\d+)\/\+{0,1}(\d+)\)/ ) {
			$incbspec = $1;
			$incmachine = $2;
			$inccourse = $3;
			$incbattle = $4;
		}
		else {
#			$warn .= " NoInc";
			$incbspec = 0;
			$incmachine = 0;
			$inccourse = 0;
			$incbattle = 0;
		}
		my( $t, $c, $m, $b);
		$t = $newbspec - $main::bspec;
		$c = $newmachine - $main::machine;
		$m = $newcourse - $main::course;
		$b = $newbattle - $main::battle;
		$note =
			"Audit:$lineno B:$newbspec/$newmachine/$newcourse/$newbattle" .
			"($incbspec/$incmachine/$inccourse/$incbattle)" .
# Seems we should use new in following also; not clear what we are checking
			"  B:$newbspec/$newmachine/$newcourse/$newbattle" .
			"(+$t/+$c/+$m/+$b)" . "\n";

# Should check for inc < 0 duh!
		if ($newbspec != ($main::bspec + $incbspec) ) {
			$warn .= " Bspec";
		}
		if ($newmachine != ($main::machine + $incmachine) ) {
			$warn .= " Mac";
		}
		if ($newcourse != ($main::course + $inccourse) ) {
			$warn .= " C";
		}
		if ($newbattle != ($main::battle + $incbattle) ) {
			$warn .= " Bat";
		}
		if ($warn ne "") {
			$warn = " WARN -" . $warn;
		}
		$main::bspec = $newbspec;
		$main::machine = $newmachine;
		$main::course = $newcourse;
		$main::battle = $newbattle;
	}
	if ($warn ne "") {
		print $note;
		#warn("$warn: $line");
		print("Audit: $warn: $line\n");
	}
}

while (<>) {
	my ($line) = ($_);
	my ($rest);

	$line =~ s/\n//g;
	$rest = $line;
	$rest =~ s/\s*\d+\s+//;
	doauditb($line, $rest, 0,0);
	print $_;
}
@


1.6
log
@Add line number to Note.
@
text
@d3 2
a4 4
$bspec = 0;
$machine = 0;
$course = 0;
$battle = 0;
d6 12
a17 1
while (<>) {
d19 1
a19 1
	if ( $_ =~ /B:(\d+)\/(\d+)\/(\d+)\/(\d+)/ ) {
d25 1
a25 1
		if ($_ =~ /^\s*(\d+)\s+/ ) {
d28 1
a28 1
		if ($_ =~ /B:\d+\/\d+\/\d+\/\d+ *\(n\/c\)/ ) {
d34 1
a34 1
		elsif ($_ =~
d48 5
a52 4
		$t = $newbspec - $bspec;
		$c = $newmachine - $machine;
		$m = $newcourse - $course;
		$b = $newbattle - $battle;
d54 1
a54 1
			"Note:$lineno B:$newbspec/$newmachine/$newcourse/$newbattle" .
d61 1
a61 1
		if ($newbspec != ($bspec + $incbspec) ) {
d64 1
a64 1
		if ($newmachine != ($machine + $incmachine) ) {
d67 1
a67 1
		if ($newcourse != ($course + $inccourse) ) {
d70 1
a70 1
		if ($newbattle != ($battle + $incbattle) ) {
d76 4
a79 4
		$bspec = $newbspec;
		$machine = $newmachine;
		$course = $newcourse;
		$battle = $newbattle;
a80 1
	$_ =~ s/$/$warn/;
d83 2
d86 10
@


1.5
log
@For apparent clarity, use new (proposed) totals in each case.
Comment that a basic check is to check for any -ve increment.
@
text
@d15 4
d44 1
a44 1
			"Note: B:$newbspec/$newmachine/$newcourse/$newbattle" .
@


1.4
log
@Produce no output when there are no errors.
No longer encourage the use of spaces.
Looks like we should change Note to use predicted totals instead of previous.
Might be easy or not.
@
text
@d42 2
a43 1
			"  B:$bspec/$machine/$course/$battle" .
d46 1
@


1.3
log
@/xhbin/perl => /usr/bin/perl
@
text
@d29 1
a29 1
			$warn .= " NoInc";
d39 5
a43 4
print "Note: B:$newbspec/$newmachine/$newcourse/$newbattle " .
	"($incbspec/$incmachine/$inccourse/$incbattle)" .
	"  B:$bspec/$machine/$course/$battle" .
	"  (+$t/+$c/+$m/+$b)" . "\n";
d66 3
@


1.2
log
@Add the showing of increments in Bspec stats.
@
text
@d1 1
a1 1
#!/xhbin/perl -w
@


1.1
log
@Initial revision
@
text
@d35 4
d41 2
a42 1
	"  B:$bspec/$machine/$course/$battle" . "\n";
@
