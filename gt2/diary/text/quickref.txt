

A Relatively Complete List of GameShark Code Meanings

PlayStation Action Replay 3,
GameShark 3 and GameBuster 3


The code types listed here apparently work for
Action Replay (English, Japanese, French),
GameShark and Game Buster version 3 cartridges.
They are also supposed to work for some slightly earlier
versions, namely GameSharks 2.41 and above,
UK Action Replay, German GameBuster and French
Action Replay 2.8 and above,  and Japanese Action
Replay 2.5 and above.

<dl>
<dt>80 -- Store Word</dt>
<dd>
Repeatedly writes the
given 16 bit value to the given memory location.
</dd>

<dt>30 -- Store Byte</dt>
<dd>
Like 80 code but affects only the byte
at the given address, which address may be odd or even.
</dd>

<h4 align="left">Conditional Codes</h4>
<dl>
<dt>D0</dt>
<dd>
If word value in the supplied location is the same as the supplied value
do the next code, otherwise skip it.
</dd>


<dt>D1</dt>
<dd>
If the word (16-bit) value in the supplied location is different from the
supplied value do the next code, otherwise skip it.
</dd>


<dt>D2</dt>
<dd>
If the word (16-bit) value in the supplied location is less than the
supplied value do the next code, otherwise skip it.
</dd>


<dt>D3</dt>
<dd>
If the word (16-bit) value in the supplied location is greater than the
supplied value do the next code, otherwise skip it.
</dd>


<dt>E0</dt>
<dd>
If byte value in the supplied location is the same as the supplied value
do the next code, otherwise skip it.
</dd>


<dt>E1</dt>
<dd>
If byte value in the supplied location is different from
the supplied value do the next code, otherwise skip it.
</dd>


<dt>E2</dt>
<dd>
If byte value in the supplied location is less than
the supplied value do the next code, otherwise skip it.
</dd>


<dt>E3</dt>
<dd>
If byte value in the supplied location is greater than
the supplied value do the next code, otherwise skip it.
</dd>


Increment (add to) and Decrement (subtract from) Codes

<dt>10</dt>
<dd>
Increment (add to) word (16-bit) code.  Adds the value supplied to the
16-bit value at the location.  Note this is done repeatedly, and so it,
and all the other increment/decrement codes, are difficult to make
useful.
</dd>


<dt>11</dt>
<dd>
Decrement (subtract from) word code.  Subtracts value supplied from the
16-bit value at the location.
</dd>


<dt>20</dt>
<dd>
Increment (add to) byte (8-bit) code.  Adds the value supplied to the
8-bit value at the location.
</dd>

<dt>21</dt>
<dd>
Decrement (subtract from) byte (8-bit) code.  Subtracts the value
supplied from the 8-bit value at the location.
</dd>


<dt>50</dt>
<dd>
Serial code.

5000RR0S IIII
    ;RR is the number of repeats
    ;S is the size. multiple of 2 for words, 1 for bytes
    ; IIII is options increment for written value

Use with 80/30 codes to avoid lots
of repetitions of similar codes if you wish to update large
numbers of consecutive memory locations.

The 50 code itself must precede a normal store code.
The size of the address increment must
match the type of the store code, since it specifies
a value by which to increase the target address on each repeat.
Note that with 80000000 codes this S value must be even (2,4,6,8,A,C),
but with 30000000 codes which work on bytes this S value can be any number
from 1 to F.


eg. 50000502 0000
801CCFBC 1111

is equivalent to

801CCFBC 1111
801CCFBE 1111
801CCFC0 1111
801CCFC2 1111
801CCFC4 1111


eg. 50000502 0001
801CCFBC 0001

is equivalent to

801CCFBC 0001
801CCFBE 0002
801CCFC0 0003
801CCFC2 0004
801CCFC4 0005
</dd>
</dl>




<h4 align="left">New Code Types</h4>


Several additional conditional codes were made available
in all versions 3.x.  They are also available in newer version 2
software (US 2.41+, UK 2.8+, JAP 2.5+).


<dl>
<dt>Must Be On / Master Codes</dt>
<dd>
Not a code, but a feature.
If a code name starts with the text "(M)" or "(m)" then
that code is always on.
</dd>


<dt>D4 -- Joypad Detect</dt>
<dd>
If joypad press equals word value do
the next code.

<dl>
<dt>Table of JoyPad values</dt>
<dd><dl>
    <dt>0001 L2</dt>
    <dt>0002 R2</dt>
    <dt>0004 L1</dt>
    <dt>0008 R1</dt>
<br><br>
    <dt>0010 Triangle</dt>
    <dt>0020 O</dt>
    <dt>0040 X</dt>
    <dt>0080 Square</dt>
<br><br>
    <dt>0100 Select</dt>
    <dt>0800 Start</dt>
<br><br>
    <dt>1000 Up</dt>
    <dt>2000 Right</dt>
    <dt>4000 Down</dt>
    <dt>8000 Left</dt>
</dl></dd>
</dl>
Add combinations. E.g. Select+L1+R1 = 0100+004+0008 = 010C
</dd>


<dt>D5 -- Codes ON If Joypad</dt>
<dd>
If joypad press equals word value, turn all codes on.

This "turn codes on/off" feature is permanently
available in all games and defaults to
"SELECT+L1+R1" for on and "SELECT+L2+R2" for
off. The D5 and D6 codes are available if you need to
change the buttons used or disable them.

If the value given is zero (D5000000 0000 or D6000000
0000) then joypad functions are disabled (This is the
same as "joypad toggle disabled" in the options screen).
</dd>


<dt>D6 -- Codes OFF If Joypad</dt>
<dd>
If joypad press equals word value, all
codes off.  This does the opposite of the D5 code.
</dd>
</dl>

<h4>More Extended Codes</h4>

There are several other interesting extended codes which
are available in more recent GameSharks.


<dl>
<dt>C0 --  Enable All Codes If Equal</dt>
<dd>
If word value in location supplied is the same as
value, enable ALL codes, otherwise disable codes, and don't do any.

A C0 code if the same as a D0 code except it acts on
ALL codes. This is useful for games that don't load when
codes are on, or if you want to avoid repeating the
same D0 code a lot of times.
</dd>


<dt>C1 -- Code Initial Delay</dt>
<dd>
Delay codes being turned on for
a period of time specified by the value part of this
code. By default this value is set to 1388 hex (5000
decimal) which waits about 10 seconds before
activating codes. This can be a useful alternative
to a D code for keeping codes off whilst a game loads.

Example: To delay all codes from being turned on for
about 30 seconds in most games use the code
C1000000 4000. The value you use depends on the
game you are playing--the value 4000 might be 30
seconds on one game, but may only be 10 seconds on
another. The only way is to know for sure is to
experiment. You can tell if codes are on or off when by
going in to the "In Game Menu" and looking at the
text "Codes are ON". If it says "Codes are ON" then
codes are on, if it says "Codes are ON." (with a dot (".") at
the end of the string) then codes are actually off until
this timer runs out.
</dd>


<dt>C2 -- Block Move</dt>
<dd>

This code copies one or more bytes from one
memory location to another.
The code must be used in pairs of two codes. The
first code is the source address, the second is the
destination address. The value part of the first code is
the number of bytes to copy. The value part of the
second code is not used.

Example: Copy 6 bytes from memory location 80010000 to 80010010.
<tt><font face="Courier"><pre>
     C2010000 0006
     10010010 0000
</pre></font></tt>
<br><br>
</dd>
</dl>



