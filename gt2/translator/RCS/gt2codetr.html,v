head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2003.12.26.03.13.18;	author arpepper;	state Exp;
branches;
next	1.5;

1.5
date	2001.04.06.01.42.22;	author arpepper;	state Exp;
branches;
next	1.4;

1.4
date	2001.04.05.03.10.03;	author arpepper;	state Exp;
branches;
next	1.3;

1.3
date	2001.04.05.02.53.55;	author arpepper;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.02.19.06.59;	author arpepper;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.02.18.46.09;	author arpepper;	state Exp;
branches;
next	;


desc
@Initial version, without much decoration.
@


1.6
log
@Replace direct assignments to document.debug.debug.value with calls to
Dbg().  Combined with adding \r before \n on each line, this will now
work in WinCE PIE.
@
text
@<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<TITLE>Translate Gran Turismo 2 Codes
</TITLE>
</HEAD>
<BODY BGCOLOR="yellow" TEXT="#000000">
<BASEFONT FACE="arial,helvetica,sans-serif,olama">
<table width="100%" bgcolor="black">
<tr color="white">
<td>
<font color="white">
<h3>My <img src="../../gifs/gt2tiny.jpg" alt="Gran Turismo 2"> Code Translator</h3>

</font>
<font color="white">
<h4>An Online Tool for Code Users</h4>
</font>
</td>
</table>
<font size=-2 color="blue">
<p>
[<a href="../">Gran Turismo Pages</a>&nbsp;]
[<a href="../diary/">Gran Turismo Diaries</a>&nbsp;]
[<a href="../email.html">email</a>&nbsp;]
</p>
</font>

<NOSCRIPT>
<table width="85%"><tr><td width="10%"></td>
<td><font size="+2">
<p>
This page will not work unless you turn JavaScript on.
</p>
</font></td></tr></table>
</NOSCRIPT>

<table name="translate" width="85%"><tr><td width="10%"></td>
<td><font face="Comic Sans MS,Arial,Helvetica">
<p>
Push either <b>Translate</b> button when you are ready to do a translation.
</p>
</font></td></tr></table>



<SCRIPT LANGUAGE="JavaScript"> 
<!--
var show_debug = 0;
var offset_table = new Array(

new Array(0x000000, 0x000, 0x000, 0x000, 0x000, 0x000),
new Array(0x0A9708, 0x000, 0x0B0, 0x310, 0x340, 0x2C4),   // lap counts etc.
new Array(0x0B84D0, 0x000, 0x0B0, 0x308, 0x340, 0x2C4),   // used cars lots
new Array(0x0BB558, 0x000, 0x0B0, 0x310, 0x340, 0x2C4),   // body mods
new Array(0x1C8E10, 0x000, 0x370, 0x5A0, 0x5D0, 0xA00)    // memory card +

);

function Dummy_Object(v) {
	this.value = v;
}
function Dbg(s) {
	if (show_debug != 0) {
		document.debug.debug.value += s;
	}
}

function compute_offset(opcode, addr, ver1, ver2) {
//       - determines offset needed to translate address from ver1 to ver2
	var offt, adjaddr;
	var v1 = 0, v2 = 0;

	if (opcode == 0x50) return 0;  // Serial Code
	if (opcode == 0xD4) return 0;  // Joypad Code
	if (opcode == 0xD5) return 0;  // Joypad Code
	if (opcode == 0xD6) return 0;  // Joypad Code
	if (opcode == 0xC1) return 0;  // Code Delay
	v1 = ver1 + 1;
	v2 = ver2 + 1;
	for (offt = 0; offset_table[offt] != null; ++offt) {
		adjaddr = addr - offset_table[offt][v1];
		if (adjaddr < offset_table[offt][0]) break;
	}
	--offt;  // always go one too far
	Dbg( adjaddr + " " + v1 + " " + v2 + " " + offt + '\n');
	
	return offset_table[offt][v2] - offset_table[offt][v1];
}

function first_line (s) {  // return first line of given buffer
	var match_line = /.*[\r\n]+/;
	var result = s.match(match_line);
	if (result != null) {
		return result[0];
	}
	return s;
}
function remove_line (s) {  // remove first line of given buffer
	var match_line = /.*[\r\n]+/;
	var result = s.match(match_line);
	if (result != null) {
		var s1 = s;
		s1 = s1.replace(match_line,"");
		return s1;
	}
	return "";
}

function check1code (s) {  // add ERROR to line if code looks bad
	var match_code = /^\s*[a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9] /;
	var result = s.match(match_code);
	if (result == null) {
		return s;  // hmm... Maybe better not to change input
	}
	return s;
}

function trans1code (s, ver1, ver2) {  // add offset to code in given line
	var match_code = /^(\s*)([a-fA-F0-9][a-fA-F0-9])([a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9])/;
	var indent = "";
	var rest = "";
	var newop = 0;
	var newcode = 0;
	var result = s.match(match_code);

	if (result != null) {
		indent = result[1];
		newop = parseInt(result[2],16);
		newcode = parseInt(result[3],16);
		rest = s;
		rest = rest.replace(match_code,"");
	}
	Dbg( newcode + " " + ver1 + " " + ver2 + '\n');
	if (newcode != NaN && newcode != 0 && newop != NaN) {
		var offset = compute_offset(newop, newcode, ver1, ver2);
		Dbg( offset + '\n');
		newcode += offset;
		var rets1 = newop.toString(16);
		while (rets1.length < 2 ) {
			rets1 = "0" + rets1;
		}
		var rets2 = newcode.toString(16);
		while (rets2.length < 6 ) {
			rets2 = "0" + rets2;
		}
		Dbg('\n');
		return indent + rets1.toUpperCase() + rets2.toUpperCase() + rest;
	}
	return "ERROR: " + s;
}

function dotranslate() {
	var in_version = 0;
	var i;

	// show_debug = 0;  // global

	if (show_debug != 0) {
		document.debug.debug.value = "";
	}
	for (i=0; offset_table[i] != null; ++i) {
		var j;
		for (j = 0; offset_table[i][j] != null; ++j) {
			Dbg( offset_table[i][j].toString(10) + " ");
		}
		Dbg("\n");
		for (j = 0; offset_table[i][j] != null; ++j) {
			Dbg("0x" + offset_table[i][j].toString(16) + " ");
		}
		Dbg("\n");
	}


	for (i=0; document.translate.in_version.options[i] != null; ++i) {
		// Dbg(document.translate.in_version.options[i].value + '\n');
		if (document.translate.in_version.options[i].selected) {
		in_version = parseInt(document.translate.in_version.options[i].value);
		}
	}
	var out_version = 0;
	for (i=0; document.translate.out_version.options[i] != null; ++i) {
		// Dbg(document.translate.out_version.options[i].value + '\n');
		if (document.translate.out_version.options[i].selected) {
		out_version = parseInt(document.translate.out_version.options[i].value);
		}
	}
	var in_code = document.translate.in_code.value;
	var one_line;
	var new_in_code = "";
	var new_out_code = "";

	i = 0;
	while ( in_code.length > 0) {
		++i;
		one_line = first_line(in_code);
		in_code = remove_line(in_code);
		new_in_code += check1code(one_line);
		new_out_code += trans1code(one_line, in_version, out_version);
		if (i > 500) break;
	}
	document.translate.in_code.value = new_in_code;
	document.translate.out_code.value = new_out_code;
}
//-->
</SCRIPT>

<hr>

<table width="85%"><tr><td width="10%"></td>
<td><font face="Courier">
<form name="translate">
<input type="button" value="Translate" onclick="dotranslate()">
<br><br>
<font face="Comic Sans MS,Arial,Helvetica">From:</font>
<select name="in_version">
	<option value="0">NTSC 1.0</option>
	<option value="1">NTSC 1.1</option>
	<option value="2">NTSC 1.2</option>
	<option value="3">PAL</option>
	<option value="4">Japanese</option>
</select>
<br>
<textarea name="in_code" cols="25" rows="7">
801D0FCA  05F4
</textarea>
<br>
<br>
<font face="Comic Sans MS,Arial,Helvetica">To:</font>
<select name="out_version">
	<option value="0">NTSC 1.0</option>
	<option value="1">NTSC 1.1</option>
	<option value="2">NTSC 1.2</option>
	<option value="3">PAL</option>
	<option value="4">Japanese</option>
</select>
<br>
<textarea name="out_code" cols="25" rows="7">
</textarea>
<br><br>
<input type="button" value="Translate" onclick="dotranslate()">
</form>
<form name="debug">
<SCRIPT LANGUAGE="JavaScript"> 
<!--
if (show_debug != 0) {
	document.write('<textarea name="debug" cols="50" rows="10"></textarea>');
}
//-->
</SCRIPT>
</form>
</font></td></tr></table>
<br>
<hr>

<table width="85%"><tr><td width="10%"></td>
<td><font face="Comic Sans MS,Arial,Helvetica">
<p>
The <a href="#translator">translator</a> will take codes you type into
the top text area, and, after you have selected the conversion to be
done, attempt to put the translated versions into the bottom text area.
</p>
<p>
Push either <b>Translate</b> button when you are ready to do a translation.
</p>

<p>
This <a href="#translator">translator</a> will work only if you
you have JavaScript turned on.
</p>

<p>
This <a href="#translator">translator</a> translates
<font color="blue">Gran</font> <font color="red">Turismo</font> <b>2</b>
simulation mode codes only.
</p>
</font></td></tr></table>

<NOSCRIPT>
<table width="85%"><tr><td width="10%"></td>
<td><font size="+2">
<p>
You do not have JavaScript turned on, so the translator will not
work for you.
</p>
</font></td></tr></table>
</NOSCRIPT>

<hr>
<font size=-2 color="blue">
<p>
[<a href="../">Gran Turismo Pages</a>&nbsp;]
[<a href="../diary/">Gran Turismo Diaries</a>&nbsp;]
[<a href="../email.html">email</a>&nbsp;]
</p>
</font>
<br>
</font>
<p>
Copyright &copy; 2001 the author/owner of the following ==>
<a href="../..">page</a> &lt;==.</p>
<font size=-2>
<p>
<a href=email.html>email</a>
</p>
<p>
<a href=disclaimer.html>Disclaimers</a>
</p>
</font>


</BODY>
</HTML>
@


1.5
log
@Allow and replicate leading white space on each line.
@
text
@d63 5
d86 1
a86 1
	document.debug.debug.value += adjaddr + " " + v1 + " " + v2 + " " + offt + '\n';
d134 1
a134 1
	document.debug.debug.value += newcode + " " + ver1 + " " + ver2 + '\n';
d137 1
a137 1
		document.debug.debug.value += offset + '\n';
d147 1
a147 1
		document.debug.debug.value += '\n';
d158 3
a160 2
	if (show_debug == 0) {
		document.debug.debug = new Dummy_Object(new String(""));
a161 2

	document.debug.debug.value = "";
d165 1
a165 1
			document.debug.debug.value += offset_table[i][j].toString(10) + " ";
d167 1
a167 1
		document.debug.debug.value += "\n";
d169 1
a169 1
			document.debug.debug.value += "0x" + offset_table[i][j].toString(16) + " ";
d171 1
a171 1
		document.debug.debug.value += "\n";
d176 1
a176 1
		//document.debug.debug.value += document.translate.in_version.options[i].value + '\n';
d183 1
a183 1
		//document.debug.debug.value += document.translate.out_version.options[i].value + '\n';
@


1.4
log
@Do not compute an offset for codes which do not have an regular address.
@
text
@d106 1
a106 1
	var match_code = /^[a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9] /;
d115 2
a116 1
	var match_code = /^([a-fA-F0-9][a-fA-F0-9])([a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9])/;
d123 3
a125 2
		newop = parseInt(result[1],16);
		newcode = parseInt(result[2],16);
d143 1
a143 1
		return rets1.toUpperCase() + rets2.toUpperCase() + rest;
@


1.3
log
@More explanation.
Bigger text areas.
@
text
@d64 1
a64 1
function compute_offset(addr, ver1, ver2) {
d69 5
d129 1
a129 1
		var offset = compute_offset(newcode, ver1, ver2);
@


1.2
log
@Lots of formatting.
@
text
@d38 1
a38 1
<table width="85%"><tr><td width="10%"></td>
d213 1
a213 1
<textarea name="in_code" cols="25" rows="3">
d227 1
a227 1
<textarea name="out_code" cols="25" rows="3">
d248 1
a248 1
The <a href="gt2codetr.html">translator</a> will take codes you type into
d257 1
a257 1
This <a href="gt2codetr.html">translator</a> will work only if you
d259 6
@


1.1
log
@Initial revision
@
text
@d9 19
d30 2
d33 1
a33 1
This page will not work unless you have JavaScript running.
d35 1
d38 8
d199 2
d204 1
a204 1
From:
d218 1
a218 1
To:
d236 1
a236 1
	document.write('<form name="debug"><textarea name="debug" cols="50" rows="10"></textarea></form>');
d241 1
d244 49
@
